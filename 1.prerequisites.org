#+TITLE: 1. Prerequisites
#+AUTHOR: Fabricio Puente Mansilla
#+DATE: <2025-04-09 Wed>
#+EMAIL: fpuentem@visiontechconsulting.ca
#+EXCLUDE_TAGS: noexport
#+OPTIONS: email:t toc:nil num:nil

Before starting the provisioning process, ensure you have the following hardware, software, and tools available.

* Hardware Requirements

- *Jetson Orin Module*: Jetson Orin NX 8GB
- *Carrier Board:* F2 Carrier board v2.x and v3.x
- *Power Supply:*
  - Voltage: 12.5 - 15.0 V
  - Current: 5A or greater
- *USB Cable:*
  - Type: USB Type-A to Type-C.
  - Recommendation: A high-quality USB cable is recommended to avoid
    data transfer issues during flashing.
- *Host Computer:*
  - Operating System: Ubuntu GNU/Linux 18.04 LTS or 20.04 LTS is
    recommended for optimal compatibility with NVIDIA SDK Manager).
  - Processor: i5
  - RAM: 8GB or more recommended
  - Disk Space: At least 50GB free disk space for downloading and
    storing SDK components.
- *Ethernet Cable (Optional):* Recommended for a stable network
  connection during the initial setup and software installations. Your
  carrier board will need an Ethernet port.
- *Storage:*
  - Type: NVMe SSD
  - Size: 128GB or larger NVMe SSD.

* Software Requirements (on the Host Computer - Ubuntu)

- Update and upgrade repository.

  #+BEGIN_SRC shell :results none :exports code :dir /sudo::
    apt update
    apt upgrade -y
 #+END_SRC

- Install requirements

  #+BEGIN_SRC shell :results none :exports code :dir /sudo::
    apt install git
 #+END_SRC

- *NVIDIA SDK Manager:* Download and install the latest version of
  NVIDIA SDK Manager from the official NVIDIA repositories:

  1. Download the ~.deb~ package.

     #+BEGIN_SRC shell :dir ~/Downloads :results output
       # Compute NVIDIA's token: ubuntu1804 / 2004 / 2204 / 2404
       set -u
       distro=$( . /etc/os-release; printf "ubuntu%s" "${VERSION_ID//./}" )
       URL="https://developer.download.nvidia.com/compute/cuda/repos/${distro}/x86_64/cuda-keyring_1.1-1_all.deb"
       BASE=${URL##*/}
       echo "Downloading tar ball into $(pwd)..."
       # Remove any previous downloads that match this name pattern
       rm -f "$BASE" 2>/dev/null || true

       # Use Content-Disposition/redirect name if the server provides it
       if wget --quiet "$URL"; then
           NEWFILE="$(ls -t $BASE 2>/dev/null | head -n1 || true)"
           if [ -n "${NEWFILE:-}" ] && [ -s "$NEWFILE" ]; then
               # Get file size in bytes (portable-ish)
               if command -v stat >/dev/null 2>&1; then
                   BYTES=$(stat -c%s "$NEWFILE" 2>/dev/null || stat -f%z "$NEWFILE" 2>/dev/null || wc -c < "$NEWFILE")
               else
                   BYTES=$(wc -c < "$NEWFILE")
               fi
               echo "✅ Download succeeded: '$NEWFILE' (${BYTES} bytes)."
               exit 0
           else
               echo "❌ Download reported success, but file missing or empty."
               exit 2
           fi
       else
           echo "❌ Download failed from: $URL"
           exit 1
       fi
     #+END_SRC

     #+RESULTS:
     : Downloading tar ball into /home/fabricio/Downloads...
     : ✅ Download succeeded: 'cuda-keyring_1.1-1_all.deb' (4332 bytes).

  2. Install ~.deb~ package
     #+NAME: get_home
     #+BEGIN_SRC shell :results output :exports none
       printf %s "$HOME"
     #+END_SRC

     #+RESULTS: get_home
     : /home/fabricio

     #+BEGIN_SRC shell :noweb yes :results output replace :var home=get_home() :exports both :dir /sudo::
       set -u
       export DEBIAN_FRONTEND=noninteractive
       path="$home/Downloads"

       deb="cuda-keyring_1.1-1_all.deb"
       deb_path="$path/$deb"

       # 1) sanity check
       if [ ! -f "$deb_path" ]; then
         echo "ERROR: $deb not found in $path."
         exit 1
       fi

       # 2) install keyring; if deps are missing, fix them quietly
       if dpkg -i "$deb_path" >/dev/null 2>&1 || apt-get -qq -y -f install >/dev/null 2>&1; then
         # 3) verify packge is installed
         if dpkg -s cuda-keyring >/dev/null 2>&1; then
           # optional: refresh apt so next steps see NVIDIA repo
           apt-get -qq update >/dev/null 2>&1 || true
           # show which repo file got installed (if any)
           repo_file=$(ls /etc/apt/sources.list.d/cuda-*.list 2>/dev/null | head -n1)
           if [ -n "$repo_file" ]; then
             echo "cuda-keyring installed successfully (repo: $(basename "$repo_file"))"
           else
             echo "cuda-keyring installed successfully"
           fi
         else
           echo "ERROR: cuda-keyring not found after install."
           exit 1
         fi
       else
         echo "ERROR: cuda-keyring installation failed. Check /var/log/dpkg.log"
         exit 1
       fi
     #+END_SRC

     #+RESULTS:
     : cuda-keyring installed successfully (repo: cuda-ubuntu2204-x86_64.list)

  3. Install ~sdkmanager~

     #+BEGIN_SRC shell :results output replace :exports both :dir /sudo::
       export DEBIAN_FRONTEND=noninteractive

       # try to install quietly (no apt spam)
       if apt-get -qq update >/dev/null 2>&1 \
          && apt-get -qq -y install sdkmanager >/dev/null 2>&1; then
         echo "sdkmanager installed successfully"
       else
         echo "sdkmanager installation failed. See /var/log/apt/history.log for details."
         exit 1
       fi
     #+END_SRC

     #+RESULTS:
     : sdkmanager installed successfully

  4. Check sanity of ~sdkmanager~

     #+BEGIN_SRC shell :results output replace :exports both
       # double-check it’s on PATH and show version
       if command -v sdkmanager >/dev/null 2>&1; then
         echo "sdkmanager version ($(sdkmanager --ver 2>/dev/null || echo version unknown))"
       else
         echo "sdkmanager not found on PATH."
         exit 1
       fi
     #+END_SRC

     #+RESULTS:
     : sdkmanager version (2.3.0.12617)

* Tools

- *Screwdriver Set (if assembly is required):* Depending on your carrier
  board and Jetson module, you might need a screwdriver to secure the
  module or install storage.

- *ESD Protection (Wrist Strap):* Highly recommended to prevent
  electrostatic discharge that could damage sensitive electronic
  components during handling.

Once you have gathered all the necessary prerequisites, you can
proceed with flashing the Jetson Orin module.
