#+TITLE: 2. NVIDIA Jetson Linux 35.4.1 Patches
#+AUTHOR: Fabricio Puente Mansilla
#+DATE: <2025-10-15 Wed>
#+EMAIL: fpuentem@visiontechconsulting.ca
#+EXCLUDE_TAGS: noexport debian
#+OPTIONS: email:t toc:nil num:nil

This section details the process of flashing the operating system onto
your Jetson Orin module using the NVIDIA SDK Manager on an Ubuntu host
machine.

* Install host build dependencies (Ubuntu/Debian)

#+BEGIN_SRC shell :dir /sudo:: :results none :exports code
  sudo apt-get update
  sudo apt-get install -y \
       build-essential bc bison flex \
       libssl-dev libelf-dev \
       dwarves device-tree-compiler \
       libncurses5-dev libncursesw5-dev \
       rsync cpio
#+END_SRC

Notes:

- ~flex/bison~ are needed for Kconfig and headers.
- ~libssl-dev/libelf-dev~ are common kernel deps.
- ~dwarves~ provides pahole (some configs require it).
- ~device-tree-compiler~ is handy for checking DTs on the target.

* Setting up cross-compilation tool

1. Create install directory for tools

   #+BEGIN_SRC shell :exports code :output none
     mkdir -p ~/tools/bootlin-toolchain-gcc-93
   #+END_SRC

2. Download Bootlin Toolchain ~gcc~.
   #+BEGIN_SRC shell :dir ~/Downloads :results output replace :exports both
     set -u

     URL="https://developer.nvidia.com/embedded/jetson-linux/bootlin-toolchain-gcc-93"
     BASE=${URL##*/}
     echo "Downloading tar ball into $(pwd)..."
     # Remove any previous downloads that match this name pattern
     rm -f "$BASE" 2>/dev/null || true

     # Use Content-Disposition/redirect name if the server provides it
     if wget --quiet "$URL"; then
       NEWFILE="$(ls -t $BASE 2>/dev/null | head -n1 || true)"
       if [ -n "${NEWFILE:-}" ] && [ -s "$NEWFILE" ]; then
         # Get file size in bytes (portable-ish)
         if command -v stat >/dev/null 2>&1; then
           BYTES=$(stat -c%s "$NEWFILE" 2>/dev/null || stat -f%z "$NEWFILE" 2>/dev/null || wc -c < "$NEWFILE")
         else
           BYTES=$(wc -c < "$NEWFILE")
         fi
         echo "✅ Download succeeded: '$NEWFILE' (${BYTES} bytes)."
         exit 0
       else
         echo "❌ Download reported success, but file missing or empty."
         exit 2
       fi
     else
       echo "❌ Download failed from: $URL"
       exit 1
     fi
  #+END_SRC

   #+RESULTS:
   : Downloading tar ball into /home/fabricio/Downloads...
   : ✅ Download succeeded: 'bootlin-toolchain-gcc-93' (96510772 bytes).

3. Uncompress the cross compilation tools.

   #+BEGIN_SRC shell :results output replace :exports both
     # tar zxvf ~/Downloads/bootlin-toolchain-gcc-93 -C ~/tools/bootlin-toolchain-gcc-93
     set -euo pipefail

     # Where to find / place things
     DL_DIR="$HOME/Downloads"
     GLOB="bootlin-toolchain-gcc-93*"
     DEST="$HOME/tools/bootlin-toolchain-gcc-93"

     # Find newest matching tarball
     SRC="$(ls -t "$DL_DIR"/$GLOB 2>/dev/null | head -n1 || true)"
     if [ -z "${SRC:-}" ] || [ ! -f "$SRC" ]; then
       echo "❌ No tarball found matching $DL_DIR/$GLOB"
       exit 1
     fi

     # Quick sanity: verify it's a tar archive we can list
     if ! tar -tf "$SRC" >/dev/null 2>&1; then
       echo "❌ '$SRC' does not look like a valid tar archive."
       exit 2
     fi

     # Replace destination
     rm -rf "$DEST"
     mkdir -p "$DEST"

     # Pick decompression flag based on extension (xz/gz/bz2/none)
     case "$SRC" in
       ,*.tar.xz|*.txz)  DFLAG="J" ;;
       ,*.tar.gz|*.tgz)  DFLAG="z" ;;
       ,*.tar.bz2|*.tbz2) DFLAG="j" ;;
       ,*.tar)           DFLAG=""  ;;
       ,*)               DFLAG=""  ;;
     esac

     # Extract quietly into DEST
     if ! tar -x${DFLAG}f "$SRC" -C "$DEST" --warning=no-unknown-keyword; then
       echo "❌ Extraction failed."
       exit 3
     fi

     # Simple success summary
     FILES=$(find "$DEST" -type f | wc -l | tr -d ' ')
     echo "✅ Extracted $(basename "$SRC") into '$DEST' ($FILES files)."
   #+END_SRC

   #+RESULTS:
   : ✅ Extracted bootlin-toolchain-gcc-93 into '/home/fabricio/tools/bootlin-toolchain-gcc-93' (4547 files).

* Downloading  NVIDIA Jetson Linux 35.4.1 source code

Reference: https://developer.nvidia.com/embedded/jetson-linux-r3541

1. Create the conatiner directory.

   #+BEGIN_SRC shell :results none
     mkdir -p ~/projects/nvidia/nvidia_sdk/JetPack_5.1.2_Linux_JETSON_ORIN_NX_TARGETS/
   #+END_SRC

2. Download Driver Package (BSP) Source.

   #+BEGIN_SRC shell :dir ~/Downloads :results output replace :exports both
     set -u
     URL="https://developer.nvidia.com/downloads/embedded/l4t/r35_release_v4.1/sources/public_sources.tbz2"
     BASE=${URL##*/}
     echo "Downloading tar ball into $(pwd)..."
     # Remove any previous downloads that match this name pattern
     rm -f "$BASE" 2>/dev/null || true

     # Use Content-Disposition/redirect name if the server provides it
     if wget --quiet "$URL"; then
       NEWFILE="$(ls -t $BASE 2>/dev/null | head -n1 || true)"
       if [ -n "${NEWFILE:-}" ] && [ -s "$NEWFILE" ]; then
         # Get file size in bytes (portable-ish)
         if command -v stat >/dev/null 2>&1; then
           BYTES=$(stat -c%s "$NEWFILE" 2>/dev/null || stat -f%z "$NEWFILE" 2>/dev/null || wc -c < "$NEWFILE")
         else
           BYTES=$(wc -c < "$NEWFILE")
         fi
         echo "✅ Download succeeded: '$NEWFILE' (${BYTES} bytes)."
         exit 0
       else
         echo "❌ Download reported success, but file missing or empty."
         exit 2
       fi
     else
       echo "❌ Download failed from: $URL"
       exit 1
     fi
  #+END_SRC

  #+RESULTS:
  : Downloading tar ball into /home/fabricio/Downloads...
  : ✅ Download succeeded: 'public_sources.tbz2' (193808816 bytes).

3. Uncompress Jetson Linux 35.4.1 source code

   #+BEGIN_SRC shell :results output replace :exports both
     # tar zxvf ~/Downloads/bootlin-toolchain-gcc-93 -C ~/tools/bootlin-toolchain-gcc-93
     #      tar xvf ~/Downloads/public_sources.tbz2 -C ~/projects/nvidia/nvidia_sdk/JetPack_5.1.2_Linux_JETSON_ORIN_NX_TARGETS

     set -euo pipefail

     # Where to find / place things
     DL_DIR="$HOME/Downloads"
     GLOB="public_sources*"
     DEST="$HOME/projects/nvidia/nvidia_sdk/JetPack_5.1.2_Linux_JETSON_ORIN_NX_TARGETS"

     # Find newest matching tarball
     SRC="$(ls -t "$DL_DIR"/$GLOB 2>/dev/null | head -n1 || true)"
     if [ -z "${SRC:-}" ] || [ ! -f "$SRC" ]; then
       echo "❌ No tarball found matching $DL_DIR/$GLOB"
       exit 1
     fi

     # Quick sanity: verify it's a tar archive we can list
     if ! tar -tf "$SRC" >/dev/null 2>&1; then
       echo "❌ '$SRC' does not look like a valid tar archive."
       exit 2
     fi

     # Replace destination
     rm -rf "$DEST"
     mkdir -p "$DEST"

     # Pick decompression flag based on extension (xz/gz/bz2/none)
     case "$SRC" in
       ,*.tar.xz|*.txz)  DFLAG="J" ;;
       ,*.tar.gz|*.tgz)  DFLAG="z" ;;
       ,*.tar.bz2|*.tbz2) DFLAG="j" ;;
       ,*.tar)           DFLAG=""  ;;
       ,*)               DFLAG=""  ;;
     esac

     # Extract quietly into DEST
     if ! tar -x${DFLAG}f "$SRC" -C "$DEST" --warning=no-unknown-keyword; then
       echo "❌ Extraction failed."
       exit 3
     fi

     # Simple success summary
     FILES=$(find "$DEST" -type f | wc -l | tr -d ' ')
     echo "✅ Extracted $(basename "$SRC") into '$DEST' ($FILES files)."
   #+END_SRC

   #+RESULTS:
   : ✅ Extracted public_sources.tbz2 into '/home/fabricio/projects/nvidia/nvidia_sdk/JetPack_5.1.2_Linux_JETSON_ORIN_NX_TARGETS' (63 files).

*  EEPROM Modifications
Reference: https://docs.nvidia.com/jetson/archives/r35.3.1/DeveloperGuide/text/HR/JetsonModuleAdaptationAndBringUp/JetsonOrinNxNanoSeries.html#eeprom-modifications

EEPROM is an optional component for a customized carrier board. If the carrier board is designed without an EEPROM, the following modifications will be needed on the MB2 BCT file:

~Linux_for_Tegra/bootloader/t186ref/BCT/tegra234-mb2-bct-misc-p3767-0000.dts~
#+BEGIN_SRC diff
- cvb_eeprom_read_size = <0x100>
+ cvb_eeprom_read_size = <0x0>
#+END_SRC

#+NAME: get_home
#+BEGIN_SRC shell :results output :exports none
  printf %s "$HOME"
#+END_SRC

#+NAME: patch_eeprom_read_size
#+BEGIN_SRC shell :results output replace :exports both :var HOME=get_home()
  set -euo pipefail
  L4T_DIR="$HOME/nvidia/nvidia_sdk/JetPack_5.1.2_Linux_JETSON_ORIN_NX_TARGETS/Linux_for_Tegra/bootloader/t186ref/BCT/"

  # 1) Locate the MB2 BCT "misc" DTS (common paths vary by L4T release)
  target_name="tegra234-mb2-bct-misc-p3767-0000.dts"
  target="$(find -L "$L4T_DIR" -type f -name "$target_name" 2>/dev/null | head -n1 || true)"

  if [ -z "$target" ]; then
    echo "ERROR: '$target_name' not found under: $L4T_DIR"
    exit 1
  fi

  echo "Target: $target"

  # 2) Show current value (for context)
  current="$(grep -nE 'cvb_eeprom_read_size' "$target" || true)"
  echo "Before:"
  echo "${current:-<not found>}"

  # 3) Only modify if it's currently 0x100 (idempotent)
  if grep -qE 'cvb_eeprom_read_size\s*=\s*<0x100>' "$target"; then
    ts="$(date +%Y%m%d-%H%M%S)"
    backup="${target}.bak.${ts}"
    cp -a -- "$target" "$backup"

    # Portable, safe in-place edit
    perl -0777 -pe 's/cvb_eeprom_read_size\s*=\s*<0x100>/cvb_eeprom_read_size = <0x0>/g' \
      > "${target}.tmp.$$" < "$target"
    mv -- "${target}.tmp.$$" "$target"

    echo "Backup created: $backup"
    echo "Patch applied: 0x100 -> 0x0"
  else
    echo "No change needed (either already 0x0 or key not found)."
  fi

  # 4) Verify and show a minimal diff
  echo "After:"
  grep -nE 'cvb_eeprom_read_size' "$target" || echo "<not found>"

  echo
  echo "Diff:"
  # Busybox-compatible fallback to colordiff if available
  if command -v colordiff >/dev/null 2>&1 && ls "${backup:-/dev/null}" >/dev/null 2>&1; then
    colordiff -u "${backup}" "$target" | sed -n '1,50p'
  elif ls "${backup:-/dev/null}" >/dev/null 2>&1; then
    diff -u "${backup}" "$target" | sed -n '1,50p'
  else
    echo "<no diff to show>"
  fi
#+END_SRC

#+RESULTS: patch_eeprom_read_size
: ERROR: 'tegra234-mb2-bct-misc-p3767-0000.dts' not found under: ~/nvidia/nvidia_sdk/JetPack_5.1.2_Linux_JETSON_ORIN_NX_TARGETS/Linux_for_Tegra/bootloader/t186ref/BCT/

* Enable PCIE3 - Secondary Ethernet port
Reference:
- https://forums.developer.nvidia.com/t/how-to-enable-the-pcie3-of-orin-nano/254908
- https://forums.developer.nvidia.com/t/how-to-enable-pcie3-with-orin-nano/335945

** Uncompress kernel source code

   #+BEGIN_SRC shell :results output replace :exports both
     # mkdir -p ./kernel_src
     # tar xvf ./kernel_src.tbz2 -C ./kernel_src
     set -euo pipefail

     # Where to find / place things
     DL_DIR="$HOME/projects/nvidia"
     GLOB="/kernel_src*"
     DEST="$HOME/projects/nvidia/nvidia_sdk/JetPack_5.1.2_Linux_JETSON_ORIN_NX_TARGETS/Linux_for_Tegra/source/public/kernel_src"

     # Find newest matching tarball
     SRC="$(ls -t "$DL_DIR"/$GLOB 2>/dev/null | head -n1 || true)"
     if [ -z "${SRC:-}" ] || [ ! -f "$SRC" ]; then
       echo "❌ No tarball found matching $DL_DIR/$GLOB"
       exit 1
     fi

     # Quick sanity: verify it's a tar archive we can list
     if ! tar -tf "$SRC" >/dev/null 2>&1; then
       echo "❌ '$SRC' does not look like a valid tar archive."
       exit 2
     fi

     # Replace destination
     rm -rf "$DEST"
     mkdir -p "$DEST"

     # Pick decompression flag based on extension (xz/gz/bz2/none)
     case "$SRC" in
       ,*.tar.xz|*.txz)  DFLAG="J" ;;
       ,*.tar.gz|*.tgz)  DFLAG="z" ;;
       ,*.tar.bz2|*.tbz2) DFLAG="j" ;;
       ,*.tar)           DFLAG=""  ;;
       ,*)               DFLAG=""  ;;
     esac

     # Extract quietly into DEST
     if ! tar -x${DFLAG}f "$SRC" -C "$DEST" --warning=no-unknown-keyword; then
       echo "❌ Extraction failed."
       exit 3
     fi

     # Simple success summary
     FILES=$(find "$DEST" -type f | wc -l | tr -d ' ')
     echo "✅ Extracted $(basename "$SRC") into '$DEST' ($FILES files)."
   #+END_SRC

   #+RESULTS:
   : ✅ Extracted kernel_src.tbz2 into '/home/fabricio/projects/nvidia/nvidia_sdk/JetPack_5.1.2_Linux_JETSON_ORIN_NX_TARGETS/Linux_for_Tegra/source/public/kernel_src' (81613 files).

** Build DTB

    #+NAME : build-dtbs
   #+BEGIN_SRC shell :results output replace :exports both :dir ~/projects/nvidia/nvidia_sdk/JetPack_5.1.2_Linux_JETSON_ORIN_NX_TARGETS/Linux_for_Tegra/source/public/kernel_src/kernel/kernel-5.10  :var cross="~/tools/bootlin-toolchain-gcc-93/bin/aarch64-buildroot-linux-gnu-" :var dtb_target="dtbs"

     set -euo pipefail

     echo "== ENV =="
     export ARCH=arm64
     export CROSS_COMPILE="$cross"
     OUT=../../build
     echo "ARCH=$ARCH"
     echo "CROSS_COMPILE=$CROSS_COMPILE"
     echo "OUT=$OUT"
     mkdir -p "$OUT"

     echo
     echo "== Generating .config =="
     make O="$OUT" tegra_defconfig

     echo
     echo "== Building target: $dtb_target =="
     # dtb_target can be "dtbs" or a specific file like tegra234-...a1.dtb
     make -j"$(nproc)" O="$OUT" "$dtb_target"

     echo
     echo "== Artifacts (top 20) =="
     ls -1 "$OUT/arch/arm64/boot/dts/nvidia/" | head -n 20

     echo
     echo "Done."
#+END_SRC

#+RESULTS:

** Copy the rebuilt DTB to your Jetson


* Fix the AX210 Bluetooth
Reference:
https://forums.developer.nvidia.com/t/please-add-these-kernel-patchs-for-fixing-ax210-bluetooth/264029

* Enable RM520N-GL 5G Card
Reference:
https://nvidia-jetson.piveral.com/jetson-orin-nano/connecting-quectel-rm520n-gl-5g-module-to-nvidia-jetson-orin/

* Fix Secondary Ethernet LEDs
Reference:
https://forums.developer.nvidia.com/t/ethernet-led/263063
